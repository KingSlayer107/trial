//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', true)
model Shop {
  id           String     @id() @default(uuid())
  name         String
  description  String?
  address      String
  phoneNumber  String
  emailAddress String
  logoUrl      String
  longitude    String
  latitude     String
  userId       String
  user         User?      @relation(fields: [userId], references: [id], name: "user")
  products     Product[]  @relation("shop")
  rentals      Rental[]   @relation("shop")
  discounts    Discount[] @relation("shop")
  ads          Ad[]       @relation("shop")
  loyaltys     Loyalty[]  @relation("shop")
  dateCreated  DateTime   @default(now())
  dateUpdated  DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Product {
  id            String     @id() @default(uuid())
  name          String
  description   String?
  price         Float
  stockQuantity Float
  imageUrl      String?
  type          String
  shopId        String
  shop          Shop?      @relation(fields: [shopId], references: [id], name: "shop")
  rentals       Rental[]   @relation("product")
  reviews       Review[]   @relation("product")
  wishlists     Wishlist[] @relation("product")
  dateCreated   DateTime   @default(now())
  dateUpdated   DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Rental {
  id          String   @id() @default(uuid())
  startDate   String
  endDate     String
  status      String
  totalCost   Float
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  productId   String
  product     Product? @relation(fields: [productId], references: [id], name: "product")
  shopId      String
  shop        Shop?    @relation(fields: [shopId], references: [id], name: "shop")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Review {
  id          String   @id() @default(uuid())
  rating      Float?
  comment     String?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  productId   String
  product     Product? @relation(fields: [productId], references: [id], name: "product")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Discount {
  id                 String   @id() @default(uuid())
  code               String?
  description        String?
  discountPercentage Float?
  startDate          String?
  endDate            String?
  shopId             String
  shop               Shop?    @relation(fields: [shopId], references: [id], name: "shop")
  dateCreated        DateTime @default(now())
  dateUpdated        DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Ad {
  id          String   @id() @default(uuid())
  title       String?
  description String?
  imageUrl    String?
  startDate   String?
  endDate     String?
  shopId      String
  shop        Shop?    @relation(fields: [shopId], references: [id], name: "shop")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Loyalty {
  id          String   @id() @default(uuid())
  points      Float?
  level       String?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  shopId      String
  shop        Shop?    @relation(fields: [shopId], references: [id], name: "shop")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Wishlist {
  id          String   @id() @default(uuid())
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  productId   String
  product     Product? @relation(fields: [productId], references: [id], name: "product")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Notification {
  id          String   @id() @default(uuid())
  message     String?
  isRead      Boolean?
  userId      String
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  emailVerified     Boolean?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  dateCreated       DateTime           @default(now())
  dateUpdated       DateTime           @default(now()) @updatedAt()
  accounts          Account[]
  sessions          Session[]
  pushNotifications PushNotification[] @relation("user")
  shops             Shop[]             @relation("user")
  rentals           Rental[]           @relation("user")
  reviews           Review[]           @relation("user")
  loyaltys          Loyalty[]          @relation("user")
  wishlists         Wishlist[]         @relation("user")
  notifications     Notification[]     @relation("user")
}

/// @@allow('all', true)
model PushNotification {
  id           String   @id() @default(uuid())
  endpoint     String
  subscription String
  dateCreated  DateTime @default(now())
  dateUpdated  DateTime @default(now()) @updatedAt()
  userId       String
  user         User     @relation(fields: [userId], references: [id], name: "user")
}

/// @@allow('all', auth().id == user.id)
model Account {
  id                       String  @id() @default(uuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
